--postevaluation
	samples=100
--executor
	classname=taskexecutor.ConillonTaskExecutor
--output
	explore/ann_grid/1
--updatables
	currents=(
		classname=updatables.WaterCurrent,
		maxspeed=0.1
	)
--evolution
	classname=evolutionaryrobotics.evolution.NEATEvolution
--robots
	actuators=(
		Rudder=(
			classname=simulation.robot.actuator.RudderActuator
		)
	),
	sensors=(
		CISensorWrapper_1=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.GeoFenceCISensor,
				id=1,
				range=40,
				numbersensors=4
			),
			id=1
		),
		CISensorWrapper_2=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.InsideBoundaryCISensor,
				id=2
			),
			id=2
		),
		CISensorWrapper_3=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.DroneCISensor,
				id=3,
				range=40,
				numbersensors=4
			),
			id=3
		),
		Sensor4=(
			classname=simulation.robot.sensor.GridSensor,
			id=4,
			numbersensors=4,
			angle=90,
			range=40,
			decay=0
		)
	),
	classname=simulation.robot.AquaticDrone,
	rudder=1,
	distancewheels=0.2,
	variablenumber=0,
	numberofrobots=5,
	radius=0.5,
	diameter=1,
	maxspeed=0.3,
	commrange=40,
	gpserror=1.8,
	compassoffset=0,
	compasserror=10,
	headingoffset=0.05,
	speedoffset=0.1,
	avoiddrones=0,
	changewaypoint=0
--random-seed
	1
--controllers
	classname=evolutionaryrobotics.neuralnetworks.NeuralNetworkController,
	network=(
		classname=evolutionaryrobotics.evolution.neat.NEATNeuralNetwork,
		inputs=(
			CINNInputWrapper1=(
				classname=controllers.inputs.CISensorWrapperNNInput,
				id=1
			),
			CINNInputWrapper2=(
				classname=controllers.inputs.CISensorWrapperNNInput,
				id=2
			),
			CINNInputWrapper3=(
				classname=controllers.inputs.CISensorWrapperNNInput,
				id=3
			),
			GridNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
				id=4
			),
			
		),
		outputs=(
			Rudder=(
				classname=controllers.outputs.RudderNNOutput,
				forwardonly=1,
				id=1
			)
		)
	)
--environment
	classname=environment.GridBoundaryEnvironment,
	width=100,
	height=100,
	wallsdistance=50,
	distance=60,
	safetydistance=5,
	random=0,
	steps=2000,
	placeoutside=0,
	gridresolution=2,
	griddistance=5,
	gridcommrange=40,
	gridupdate=50,
	randomWidth=1
--evaluation
	classname=evaluation.GridCoverageFitness,
	decay=0
--population
	classname=evolutionaryrobotics.populations.NEATPopulation,
	samples=5,
	generations=100,
	size=150
--simulator
	network=(
		classname=network.SimulationNetwork
	)
